/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones = 'Europe/Helsinki';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {
    align: AlignBlock;
    board: BoardBlock;
    calendar: CalendarBlock;
    card: CardBlock;
    collapsible: CollapsibleBlock;
    committee: CommitteeBlock;
    'custom-html': CustomHTMLBlock;
    'embed-video': EmbedVideoBlock;
    form: FormBlock;
    'fuksi-year': FuksiYearBlock;
    icon: IconBlock;
    newsletter: NewsletterBlock;
    'official-year': OfficialYearBlock;
    'pdf-viewer': PDFViewerBlock;
    'page-navigation': PageNavigationBlock;
    'two-columns': TwoColumnsBlock;
  };
  collections: {
    'board-members': BoardMember;
    divisions: Division;
    documents: Document;
    fuksis: Fuksi;
    'fuksi-groups': FuksiGroup;
    media: Media;
    'news-item-types': NewsItemType;
    'news-items': NewsItem;
    newsletters: Newsletter;
    'official-roles': OfficialRole;
    officials: Official;
    pages: Page;
    'page-navigations': PageNavigation;
    forms: Form;
    'form-submissions': FormSubmission;
    redirects: Redirect;
    exports: Export;
    users: User;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    'board-members': BoardMembersSelect<false> | BoardMembersSelect<true>;
    divisions: DivisionsSelect<false> | DivisionsSelect<true>;
    documents: DocumentsSelect<false> | DocumentsSelect<true>;
    fuksis: FuksisSelect<false> | FuksisSelect<true>;
    'fuksi-groups': FuksiGroupsSelect<false> | FuksiGroupsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    'news-item-types': NewsItemTypesSelect<false> | NewsItemTypesSelect<true>;
    'news-items': NewsItemsSelect<false> | NewsItemsSelect<true>;
    newsletters: NewslettersSelect<false> | NewslettersSelect<true>;
    'official-roles': OfficialRolesSelect<false> | OfficialRolesSelect<true>;
    officials: OfficialsSelect<false> | OfficialsSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    'page-navigations': PageNavigationsSelect<false> | PageNavigationsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    exports: ExportsSelect<false> | ExportsSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    'main-navigation': MainNavigation;
    footer: Footer;
    'landing-page': LandingPage;
    'partner-section': PartnerSection;
    'newsletter-settings': NewsletterSettings;
  };
  globalsSelect: {
    'main-navigation': MainNavigationSelect<false> | MainNavigationSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
    'landing-page': LandingPageSelect<false> | LandingPageSelect<true>;
    'partner-section': PartnerSectionSelect<false> | PartnerSectionSelect<true>;
    'newsletter-settings': NewsletterSettingsSelect<false> | NewsletterSettingsSelect<true>;
  };
  locale: 'fi' | 'en';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      schedulePublish: TaskSchedulePublish;
      sendNewsletter: TaskSendNewsletter;
      createCollectionExport: TaskCreateCollectionExport;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AlignBlock".
 */
export interface AlignBlock {
  align: 'left' | 'center' | 'right';
  /**
   * Width of the content in percentage (10-100%)
   */
  width: number;
  content: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'align';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BoardBlock".
 */
export interface BoardBlock {
  members: (number | BoardMember)[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'board';
}
/**
 * Manage board members. When creating the board members for the new year, you can just replace the information for the current entries instead of creating new ones.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "board-members".
 */
export interface BoardMember {
  id: number;
  name: string;
  role: string;
  image: number | Media;
  email: string;
  telegram?: string | null;
  phone?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Upload and manage media files. If you want to change an image in the media library, please replace the image with the new one instead of uploading a new version. Beware that this will change the image in all pages that use it.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  /**
   * Alternative text for the image for accessibility. Should be provided when the image provides additional information for the page reader or acts as an interactive element. For example, an image with info about an event or a button with an image should have an alt text. In these cases, the alt text should give the same information as the image or tell the action of the button, respectively.
   */
  alt?: string | null;
  blurDataUrl: string;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CalendarBlock".
 */
export interface CalendarBlock {
  title: string;
  calendars: {
    /**
     * Google Calendar ID (found in calendar settings)
     */
    calendarId: string;
    /**
     * Pick a color
     */
    color: string;
    /**
     * Pick a color
     */
    textColor: string;
    /**
     * You can find all icons on the page https://lucide.dev/icons/
     */
    icon: string[];
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'calendar';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CardBlock".
 */
export interface CardBlock {
  content: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Pick a color
   */
  backgroundColor: string;
  /**
   * Pick a color
   */
  textColor: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'card';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CollapsibleBlock".
 */
export interface CollapsibleBlock {
  title: string;
  content: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  isOpenByDefault?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'collapsible';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CommitteeBlock".
 */
export interface CommitteeBlock {
  officialRole: number | OfficialRole;
  /**
   * Select a default image to display there is no image for the official
   */
  defaultImage?: (number | null) | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'committee';
}
/**
 * Manage official roles. When creating the official table for the new year, you should use the upload panel found in "/admin/actions" to upload the official table.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "official-roles".
 */
export interface OfficialRole {
  id: number;
  /**
   * The name of the official role
   */
  name: string;
  officials?: (number | Official)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Manage officials. When creating the official table for the new year, you should use the upload panel found in "/admin/actions" to upload the official table.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "officials".
 */
export interface Official {
  id: number;
  name: string;
  photo?: (number | null) | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CustomHTMLBlock".
 */
export interface CustomHTMLBlock {
  /**
   * Enter custom HTML code. Be careful with scripts and ensure the HTML is safe.
   */
  html: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'custom-html';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "EmbedVideoBlock".
 */
export interface EmbedVideoBlock {
  /**
   * YouTube or Vimeo video URL
   */
  videoUrl: string;
  aspectRatio: '16:9' | '4:3' | '1:1';
  id?: string | null;
  blockName?: string | null;
  blockType: 'embed-video';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  form: number | Form;
  enableIntro?: boolean | null;
  introContent?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'form';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: number;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: any;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'date';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    type?: ('reference' | 'custom') | null;
    reference?: {
      relationTo: 'pages';
      value: number | Page;
    } | null;
    url?: string | null;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: any;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Manage website pages
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  /**
   * Banner image of the page. Please ensure to provide a high enough quality image.
   */
  bannerImage?: (number | null) | Media;
  content: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
  };
  /**
   * The URL path for this page. This will be auto-generated from the title if left empty. Please prefer flat paths, for example "/about" instead of "/about/index".
   */
  path: string;
  /**
   * Show a table of contents for the page. This will be shown in the left sidebar or above the content on mobile.
   */
  showTableOfContents?: boolean | null;
  /**
   * Show the partners of the page. This will be shown above the footer.
   */
  showPartners?: boolean | null;
  /**
   * Make the page full width. This should be used pretty much only for official, fuksi and board pages.
   */
  fullWidth?: boolean | null;
  /**
   * Prevent the page from being indexed by search engines. Use for fuksi and official pages.
   */
  noIndex?: boolean | null;
  /**
   * Hide the page from public view. This will be set to false when publishing the page via schedule publish.
   */
  hidden?: boolean | null;
  /**
   * Select the board members that are responsible for the page. These will be shown in the right sidebar or below the content mobile.
   */
  boardMember?: (number | BoardMember)[] | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FuksiYearBlock".
 */
export interface FuksiYearBlock {
  /**
   * The fuksi year to display. Purely to filter divisions from correct year.
   */
  year: number;
  /**
   * Select the fuksi groups to display
   */
  fuksiGroups?: (number | FuksiGroup)[] | null;
  /**
   * Select a default image to display there is no image for the fuksi
   */
  defaultImage?: (number | null) | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'fuksi-year';
}
/**
 * Manage fuksi groups. When creating the fuksi groups for the new year, you should use the upload panel found in "/admin/actions" to upload the fuksi groups.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fuksi-groups".
 */
export interface FuksiGroup {
  id: number;
  name: string;
  year: number;
  fuksis: (number | Fuksi)[];
  updatedAt: string;
  createdAt: string;
}
/**
 * Manage fuksis. When creating the fuksis for the new year, you should use the upload panel found in "/admin/actions" to upload the fuksis.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fuksis".
 */
export interface Fuksi {
  id: number;
  name: string;
  year: number;
  photo?: (number | null) | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "IconBlock".
 */
export interface IconBlock {
  /**
   * You can find all icons on the page https://lucide.dev/icons/
   */
  icon: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'icon';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "NewsletterBlock".
 */
export interface NewsletterBlock {
  newsletter: number | Newsletter;
  id?: string | null;
  blockName?: string | null;
  blockType: 'newsletter';
}
/**
 * Manage newsletters. You can change the settings for the newsletter in the "Newsletter Settings" section.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletters".
 */
export interface Newsletter {
  id: number;
  /**
   * Type of the newsletter. Career newsletter is currently only in use for English.
   */
  type: 'weekly' | 'career';
  /**
   * Newsletter week number and year in format "1/25"
   */
  newsletterNumber: string;
  /**
   * Greetings to be included in the newsletter. This is shown at the beginning of the newsletter.
   */
  greetings?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Closing words (for example "Viikon töherrys") to be included in the newsletter. This is shown at the end of the newsletter.
   */
  closingWords?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * News items to be included in the newsletter. Only future news items are shown based on the newsletter number.
   */
  newsItems: (number | NewsItem)[];
  /**
   * Whether the newsletter is ready to be sent. The newsletter will be sent automatically when this is checked at the time specified below or the next clock hour. Unchecking will cancel the scheduled email. Remember to save the newsletter when changing this. The newsletter needs to also be updated to the weekly page.
   */
  readyToSend?: boolean | null;
  /**
   * The time of day to send the newsletter. Make sure the time is in the future, else it will be sent at the next clock hour.
   */
  sendTime?: string | null;
  sendTime_tz?: SupportedTimezones;
  /**
   * Whether the newsletter has been sent
   */
  sent?: boolean | null;
  jobId?: number | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * Manage news items. These are individual news items that are shown in the newsletter. You can create new news item types in the "News Item Types" section.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "news-items".
 */
export interface NewsItem {
  id: number;
  title: string;
  /**
   * The type of news item. You can create new news item types in the "News Item Types" section.
   */
  type: number | NewsItemType;
  content: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * The date of the news item. The date is used to sort the news items in the newsletter and for filtering the news items in the admin panel.
   */
  date: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * Manage news item types. These are the types of news items that can be created in the "News Items" section.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "news-item-types".
 */
export interface NewsItemType {
  id: number;
  /**
   * The label of the news item type. This is shown in the newsletter. Remember to define all locales.
   */
  label: string;
  /**
   * Unique identifier for the type (e.g., "guild-events"). This is used to identify the type of news item.
   */
  value: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "OfficialYearBlock".
 */
export interface OfficialYearBlock {
  /**
   * Show officials from a specified divisions
   */
  divisions: {
    division: number | Division;
    /**
     * Pick a color
     */
    backgroundColor: string;
    /**
     * Pick a color
     */
    textColor: string;
    id?: string | null;
  }[];
  /**
   * Select a default image to display there is no image for the official
   */
  defaultImage?: (number | null) | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'official-year';
}
/**
 * Manage divisions. When creating the official table for the new year, you should use the upload panel found in "/admin/actions" to upload the official table.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "divisions".
 */
export interface Division {
  id: number;
  /**
   * The name of the division
   */
  name: string;
  officialRoles?: (number | OfficialRole)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PDFViewerBlock".
 */
export interface PDFViewerBlock {
  /**
   * Choose whether to use internal or external documents
   */
  type?: ('internal' | 'external') | null;
  /**
   * Select one or more documents. If multiple documents are selected, a dropdown will be displayed to select the document to be displayed.
   */
  documents?: (number | Document)[] | null;
  /**
   * Add one or more external documents. If multiple documents are selected, a dropdown will be displayed to select the document to be displayed.
   */
  externalDocuments?:
    | {
        /**
         * Direct URL to PDF file. Make sure the url can be previewed in the viewer
         */
        url: string;
        /**
         * Title for the PDF document to be displayed
         */
        title: string;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'pdf-viewer';
}
/**
 * Upload and manage PDF files. After uploading, the files can be shown using the PDF viewer block for Pages.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "documents".
 */
export interface Document {
  id: number;
  title: string;
  /**
   * Upload a thumbnail image for the document
   */
  thumbnail?: (number | null) | Media;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "PageNavigationBlock".
 */
export interface PageNavigationBlock {
  /**
   * Select a page navigation to display
   */
  pageNavigation: number | PageNavigation;
  /**
   * Select a style to display the page navigation
   */
  style: 'links' | 'blocks';
  id?: string | null;
  blockName?: string | null;
  blockType: 'page-navigation';
}
/**
 * Manage website page navigations. These are used for the fuksi page navigation but also link lists can be created with these.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "page-navigations".
 */
export interface PageNavigation {
  id: number;
  title: string;
  pages?:
    | {
        label: string;
        page: number | Page;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TwoColumnsBlock".
 */
export interface TwoColumnsBlock {
  /**
   * If true, the right column will be below the left column on mobile.
   */
  wrapOnMobile?: boolean | null;
  /**
   * The layout of the columns. On mobile, the layout will be 100% if wrapOnMobile is true.
   */
  layout:
    | 'grid-cols-[1fr_1fr]'
    | 'grid-cols-[1fr_2fr]'
    | 'grid-cols-[2fr_1fr]'
    | 'grid-cols-[1fr_3fr]'
    | 'grid-cols-[3fr_1fr]';
  contentLeft: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  contentRight: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'two-columns';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: number;
  form: number | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: number;
  /**
   * Give the path to redirect from. This should be the relative path to the page, e.g. "/kiltajarjestys" to redirect all locales or "/fi/kiltajarjestys" or "/en/kiltajarjestys" to redirect only one locale of the Kiltajärjestys page.
   */
  from: string;
  to?: {
    /**
     * Use a internal link to redirect to pages inside the Guild website. Otherwise, use a custom URL.
     */
    type?: ('reference' | 'custom') | null;
    reference?: {
      relationTo: 'pages';
      value: number | Page;
    } | null;
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exports".
 */
export interface Export {
  id: number;
  name?: string | null;
  format?: ('csv' | 'json') | null;
  limit?: number | null;
  page?: number | null;
  sort?: string | null;
  sortOrder?: ('asc' | 'desc') | null;
  locale?: ('all' | 'fi' | 'en') | null;
  drafts?: ('yes' | 'no') | null;
  selectionToUse?: ('currentSelection' | 'currentFilters' | 'all') | null;
  fields?: string[] | null;
  collectionSlug: string;
  where?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  /**
   * The role of the user. Admins can, for example, view form submissions and edit board and official information.
   */
  role?: ('admin' | 'user') | null;
  sub?: string | null;
  email: string;
  updatedAt: string;
  createdAt: string;
  enableAPIKey?: boolean | null;
  apiKey?: string | null;
  apiKeyIndex?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: number;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'schedulePublish' | 'sendNewsletter' | 'createCollectionExport';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        parent?: {
          taskSlug?: ('inline' | 'schedulePublish' | 'sendNewsletter' | 'createCollectionExport') | null;
          taskID?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'schedulePublish' | 'sendNewsletter' | 'createCollectionExport') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'board-members';
        value: number | BoardMember;
      } | null)
    | ({
        relationTo: 'divisions';
        value: number | Division;
      } | null)
    | ({
        relationTo: 'documents';
        value: number | Document;
      } | null)
    | ({
        relationTo: 'fuksis';
        value: number | Fuksi;
      } | null)
    | ({
        relationTo: 'fuksi-groups';
        value: number | FuksiGroup;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'news-item-types';
        value: number | NewsItemType;
      } | null)
    | ({
        relationTo: 'news-items';
        value: number | NewsItem;
      } | null)
    | ({
        relationTo: 'newsletters';
        value: number | Newsletter;
      } | null)
    | ({
        relationTo: 'official-roles';
        value: number | OfficialRole;
      } | null)
    | ({
        relationTo: 'officials';
        value: number | Official;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'page-navigations';
        value: number | PageNavigation;
      } | null)
    | ({
        relationTo: 'forms';
        value: number | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: number | FormSubmission;
      } | null)
    | ({
        relationTo: 'redirects';
        value: number | Redirect;
      } | null)
    | ({
        relationTo: 'exports';
        value: number | Export;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: number | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "board-members_select".
 */
export interface BoardMembersSelect<T extends boolean = true> {
  name?: T;
  role?: T;
  image?: T;
  email?: T;
  telegram?: T;
  phone?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "divisions_select".
 */
export interface DivisionsSelect<T extends boolean = true> {
  name?: T;
  officialRoles?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "documents_select".
 */
export interface DocumentsSelect<T extends boolean = true> {
  title?: T;
  thumbnail?: T;
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fuksis_select".
 */
export interface FuksisSelect<T extends boolean = true> {
  name?: T;
  year?: T;
  photo?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fuksi-groups_select".
 */
export interface FuksiGroupsSelect<T extends boolean = true> {
  name?: T;
  year?: T;
  fuksis?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  blurDataUrl?: T;
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "news-item-types_select".
 */
export interface NewsItemTypesSelect<T extends boolean = true> {
  label?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "news-items_select".
 */
export interface NewsItemsSelect<T extends boolean = true> {
  title?: T;
  type?: T;
  content?: T;
  date?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletters_select".
 */
export interface NewslettersSelect<T extends boolean = true> {
  type?: T;
  newsletterNumber?: T;
  greetings?: T;
  closingWords?: T;
  newsItems?: T;
  readyToSend?: T;
  sendTime?: T;
  sendTime_tz?: T;
  sent?: T;
  jobId?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "official-roles_select".
 */
export interface OfficialRolesSelect<T extends boolean = true> {
  name?: T;
  officials?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "officials_select".
 */
export interface OfficialsSelect<T extends boolean = true> {
  name?: T;
  photo?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  bannerImage?: T;
  content?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  path?: T;
  showTableOfContents?: T;
  showPartners?: T;
  fullWidth?: T;
  noIndex?: T;
  hidden?: T;
  boardMember?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "page-navigations_select".
 */
export interface PageNavigationsSelect<T extends boolean = true> {
  title?: T;
  pages?:
    | T
    | {
        label?: T;
        page?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        date?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exports_select".
 */
export interface ExportsSelect<T extends boolean = true> {
  name?: T;
  format?: T;
  limit?: T;
  page?: T;
  sort?: T;
  sortOrder?: T;
  locale?: T;
  drafts?: T;
  selectionToUse?: T;
  fields?: T;
  collectionSlug?: T;
  where?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  role?: T;
  sub?: T;
  email?: T;
  updatedAt?: T;
  createdAt?: T;
  enableAPIKey?: T;
  apiKey?: T;
  apiKeyIndex?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        parent?:
          | T
          | {
              taskSlug?: T;
              taskID?: T;
            };
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * Main navigation menu items.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "main-navigation".
 */
export interface MainNavigation {
  id: number;
  /**
   * The title of the website. This will be shown in the header of the website.
   */
  title: string;
  /**
   * The header logo of the website. This will be shown in the header of the website.
   */
  logo: number | Media;
  items: {
    /**
     * The label of the navigation item. Remember to provide all locales.
     */
    label: string;
    /**
     * The type of the navigation item. If the item is a page, it will be shown as a link to the page. If the item is an external link, it will be shown as a link to the external page. If the item is a menu, it will be shown as a dropdown menu.
     */
    type: 'page' | 'external' | 'menu';
    page?: (number | null) | Page;
    /**
     * The URL of the external link. Remember to provide all locales.
     */
    url?: string | null;
    children?:
      | {
          /**
           * The label of the navigation item. Remember to provide all locales.
           */
          label: string;
          /**
           * The type of the navigation item. If the item is a page, it will be shown as a link to the page. If the item is an external link, it will be shown as a link to the external page. If the item is a menu, it will be shown as a dropdown menu.
           */
          type: 'page' | 'external' | 'menu';
          page?: (number | null) | Page;
          /**
           * The URL of the external link. Remember to provide all locales.
           */
          url?: string | null;
          subchildren?:
            | {
                /**
                 * The label of the navigation item. Remember to provide all locales.
                 */
                label: string;
                /**
                 * The type of the navigation item. If the item is a page, it will be shown as a link to the page. If the item is an external link, it will be shown as a link to the external page. If the item is a menu, it will be shown as a dropdown menu.
                 */
                type: 'page' | 'external' | 'menu';
                page?: (number | null) | Page;
                /**
                 * The URL of the external link. Remember to provide all locales.
                 */
                url?: string | null;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
    id?: string | null;
  }[];
  _status?: ('draft' | 'published') | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * Footer content. This is the content that is shown in the footer of the website.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: number;
  /**
   * The main content of the footer (address, contact info, etc.). Remember to provide all locales.
   */
  content: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Social media links. Add the link to the social media profile/page and the correct icon will be automatically added. Remember to provide all locales.
   */
  socials?: string[] | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * Settings for the landing page
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "landing-page".
 */
export interface LandingPage {
  id: number;
  /**
   * Title of the landing page
   */
  title: string;
  /**
   * Banner images of the landing page slideshow. Multiple images are shown in a slideshow.
   */
  bannerImages: (number | Media)[];
  /**
   * Announcement for the landing page. This is shown above the calendar. Used for example for guild meeting announcements.
   */
  announcement: {
    /**
     * Enable the announcement. If disabled, the announcement will not be shown.
     */
    enabled?: boolean | null;
    /**
     * Content of the announcement. Remember to provide all locales.
     */
    content?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Pick a color
     */
    color: string;
    /**
     * Pick a color
     */
    textColor: string;
  };
  /**
   * Calendars for the landing page. This is shown below the announcement. Multiple calendars can be added.
   */
  calendar: {
    calendars: {
      /**
       * Google Calendar ID (the address of google calendar). This is found in the calendar settings.
       */
      calendarId: string;
      /**
       * Pick a color
       */
      color: string;
      /**
       * Pick a color
       */
      textColor: string;
      /**
       * You can find all icons on the page https://lucide.dev/icons/
       */
      icon: string[];
      id?: string | null;
    }[];
    /**
     * Maximum number of events to display.
     */
    maxEvents: number;
  };
  content: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
  };
  _status?: ('draft' | 'published') | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * Partner organizations and their logos
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "partner-section".
 */
export interface PartnerSection {
  id: number;
  /**
   * The title of the partner section.
   */
  title: string;
  partners: {
    /**
     * The name of the partner organization.
     */
    name: string;
    /**
     * The URL of the partner organization.
     */
    link: string;
    /**
     * The logo of the partner organization.
     */
    logo: number | Media;
    id?: string | null;
  }[];
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * Settings for the weekly and career newsletters
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletter-settings".
 */
export interface NewsletterSettings {
  id: number;
  weekly: {
    /**
     * Logo to be used in the weekly newsletter
     */
    logo: number | Media;
    /**
     * Prefix for the title of the weekly newsletter. For example: "Kilta tiedottaa" or "Weekly News"
     */
    titlePrefix: string;
    /**
     * Footer text for the weekly newsletter. This will shown below the closing words in the newsletter email. This is not shown in the Newsletter block.
     */
    footer?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Sender name for the weekly newsletter.
     */
    senderName: string;
    /**
     * Sender email for the weekly newsletter.
     */
    senderEmail: string;
    /**
     * Recipient email for the weekly newsletter. This is the email address that will receive the newsletter email. Google groups should be configured to allow emails from Mailgun.
     */
    recipientEmail: string;
    /**
     * Weekly page for the newsletter. Linked to the Telegram message.
     */
    weeklyPage: number | Page;
    /**
     * Telegram bot token for the newsletter. Get it from @BotFather
     */
    telegramBotToken: string;
    /**
     * Telegram channel name for the newsletter. For example: @fktieto
     */
    telegramChannelId: string;
  };
  career: {
    /**
     * Prefix for the title of the career newsletter. For example: "Career News"
     */
    titlePrefix: string;
    /**
     * Footer text for the career newsletter
     */
    footer?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Sender name for the career newsletter.
     */
    senderName: string;
    /**
     * Sender email for the career newsletter
     */
    senderEmail: string;
    /**
     * Recipient email for the career newsletter. This is the email address that will receive the newsletter email. Google groups should be configured to allow emails from Mailgun.
     */
    recipientEmail: string;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "main-navigation_select".
 */
export interface MainNavigationSelect<T extends boolean = true> {
  title?: T;
  logo?: T;
  items?:
    | T
    | {
        label?: T;
        type?: T;
        page?: T;
        url?: T;
        children?:
          | T
          | {
              label?: T;
              type?: T;
              page?: T;
              url?: T;
              subchildren?:
                | T
                | {
                    label?: T;
                    type?: T;
                    page?: T;
                    url?: T;
                    id?: T;
                  };
              id?: T;
            };
        id?: T;
      };
  _status?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  content?: T;
  socials?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "landing-page_select".
 */
export interface LandingPageSelect<T extends boolean = true> {
  title?: T;
  bannerImages?: T;
  announcement?:
    | T
    | {
        enabled?: T;
        content?: T;
        color?: T;
        textColor?: T;
      };
  calendar?:
    | T
    | {
        calendars?:
          | T
          | {
              calendarId?: T;
              color?: T;
              textColor?: T;
              icon?: T;
              id?: T;
            };
        maxEvents?: T;
      };
  content?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  _status?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "partner-section_select".
 */
export interface PartnerSectionSelect<T extends boolean = true> {
  title?: T;
  partners?:
    | T
    | {
        name?: T;
        link?: T;
        logo?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "newsletter-settings_select".
 */
export interface NewsletterSettingsSelect<T extends boolean = true> {
  weekly?:
    | T
    | {
        logo?: T;
        titlePrefix?: T;
        footer?: T;
        senderName?: T;
        senderEmail?: T;
        recipientEmail?: T;
        weeklyPage?: T;
        telegramBotToken?: T;
        telegramChannelId?: T;
      };
  career?:
    | T
    | {
        titlePrefix?: T;
        footer?: T;
        senderName?: T;
        senderEmail?: T;
        recipientEmail?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?: {
      relationTo: 'pages';
      value: number | Page;
    } | null;
    global?: 'landing-page' | null;
    user?: (number | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSendNewsletter".
 */
export interface TaskSendNewsletter {
  input: {
    newsletterId: number;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskCreateCollectionExport".
 */
export interface TaskCreateCollectionExport {
  input: {
    name?: string | null;
    format?: ('csv' | 'json') | null;
    limit?: number | null;
    page?: number | null;
    sort?: string | null;
    sortOrder?: ('asc' | 'desc') | null;
    locale?: ('all' | 'fi' | 'en') | null;
    drafts?: ('yes' | 'no') | null;
    selectionToUse?: ('currentSelection' | 'currentFilters' | 'all') | null;
    fields?: string[] | null;
    collectionSlug: string;
    where?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    user?: string | null;
    userCollection?: string | null;
    exportsCollection?: string | null;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}